LINE    := %SEQ < ( CMD | DEF | EXP | EMPTY ) ; >
EMPTY   := /\s*/

CMD     := CONF | DIR | DEL | LOAD | IMPORT | EXIT
CONF    := config /\w+/ ( NUM | /on|off/ ) ?
DIR     := dir FIELD ?
DEL     := del %SEQ < FIELD , >
LOAD    := load /[\w\.]+/ /-[tvw]/ *
IMPORT  := import /[\w\.]+/ /-[vw]/ *
EXIT    := exit

DEF     := SUPER ? BIND
SUPER   := ( NAME . ) +
BIND    := ( FUNC | VAR_ ) AT:PARENT ? = EXP DOC ? ## Delay this
FUNC    := NAME:VAR FORM
VAR_    := VARS | NAME:VAR
VARS    := %BKT < %SEQ < VAR_ , > >
DOC     := /".*"/

FIELD   := NAME ATTR *
NAME    := /[^\W\d_]\w*[?]?/                        ## allow '?' at the end
ATTR    := . / NAME:ATTR                            ## '/' forces no space in between

FORM    := PAR_IT
PAR_IT  := PAR_LST | NAME:PAR   
PAR_LST := %BKT < ( _PARS ( , _OPTS ) ? ( , _EXT ) ? |  _OPTS ( , _EXT ) ? | _EXT ? ) >
_PARS   := %SEQ < ( BIND ! PAR_IT ~ ! ) , >         ## '!' forbids the match
_OPTS   := %SEQ < ( BIND:OPTPAR ~ ! ) , >
_EXT    := NAME:EXTPAR ~

EXP     := MAP | CLOSURE | ENV | BODY

MAP     := FORM => DELAY
CLOSURE := ENV DELAY
DELAY   := EXP                                      ## Delay this
ENV     := AT | DICT | MATCH
AT      := @ VAL_
DICT    := %GRP < %SEQ < BIND , > >                 ## Delay this
MATCH   := FORM :: VAL_
VAL_    := APPLY:SEQ | ITEM
APPLY   := FIELD ( GEN_LST | VAL_LST )

BODY    := PRINT ? ( IF_ELSE | SEQ ) PRINT ?
IF_ELSE := SEQ if SEQ else EXP                      ## Delay this
SEQ     := _TERM ( BOP ? _TERM ) *
_TERM   := LOP ? ITEM ATTR ? ROP ?

PRINT   := /`.*?`/
ITEM    := GROUP | WHEN | ATOM | LIST
GROUP   := %GRP < EXP >
WHEN    := when %GRP < ( ( CASE , ) + EXP ) >       ## Delay this
CASE    := EXP : EXP

ATOM    := FIELD | SYM | ANS | NUM
SYM     := ' NAME:SYM
ANS     := /_(\d+|_*)/

NUM     := BIN | HEX | COMPLEX | REAL
COMPLEX := REAL [+-] REAL I
REAL    := /-?\d+(\.\d+)?/ ( [eE] - /-?\d+/ ) ?
BIN     := /0b[01]+/
HEX     := /0x[0-9a-fA-F]+/

LIST    := ' SYM_LST | GEN_LST | IDC_LST | VAL_LST
SYM_LST := %LST < ( UNQUOTE | _SYM_IT ) , >
UNQUOTE := ` ( LIST | NAME )                        ## convert the item back to a value
_SYM_IT := SYM_LST | NAME:SYM
GEN_LST := %BKT < ( EXP ( for CONSTR ) + ) >        ## Delay this
CONSTR  := FORM in EXP ( if EXP ) ?
IDC_LST := %BKT < %SEQ < SLICE , > >
SLICE   := _SLC : _SLC ( : _SLC ) ?
_SLC    := ( SEQ | EMPTY )
VAL_LST := _MAT | %LST < EXP , >
_MAT    := %BKT < ( SUB_LST:VAL_LST ( ; SUB_LST:VAL_LST ) + ) >
SUB_LST := %SEQ < EXP , > ?

### MACROS ###
%LST < $ITM $SEP >  := %BKT < ( %SEQ < $ITM $SEP > ? ) >
%BKT < $EXP >       := "[" - $EXP "]" -
%GRP < $EXP >       := "(" - $EXP ")" -
%SEQ < $ITM $SEP >  := $ITM ( $SEP $ITM ) *