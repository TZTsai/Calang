LINE    := ( CMD | EVAL ) ? ( # /.*/ ) ?

CMD     := CONF | DIR | INFO | DEL | LOAD | IMPORT | PYTHON | EXIT

CONF    := config /\w+/ ( NUM | /on|off/ ) ?
DIR     := dir VAR ? "*" ?
DEL     := del @SEQ VAR ,
LOAD    := load /[\w\.]+/ /-[tvw]/ *
IMPORT  := import /[\w\.]+/ /-[vw]/ *
INFO    := info VAR ?
PYTHON  := %%    ## starts a python REPL session
EXIT    := exit

EVAL    := ( @SEQ EXPR ; ) ";" ?
EXPR    := BIND | EXP
BIND    := NS ? FORM = EXPR DOC:COMMENT ?
NS      := @ ITEM    ## namespace
FORM    := VAR ARG | PHRASE
VAR     := NAME ATTR *
ARG     := NAME | LIST
NAME    := /[^\W\d]\w*/  ## /([^\W\d]|[\u0080-\U00100000])[\w\u0080-\U00100000]*/
ATTR    := . / ATTR:NAME
EXP     := MAP | AT | PHRASE

MAP     := FORM:ITEM → EXP
AT      := @ ITEM EXP
PHRASE  := ITEM +

ITEM    := ENV | GROUP | QUOTE | UNQUOTE | GENER | GENLS | LIST | ARRAY | ATOM
ENV     := @GRP @SEQ_ BIND ,
GROUP   := @GRP EXP
QUOTE   := ' EXP '
UNQUOTE := { EXP }

GENER   := @GRP ( EXP @ _CSTS )
GENLS   := [ EXP @ _CSTS ]
_CSTS   := @SEQ CST ,    ## constraints
CST     := DOM | EXPR
DOM     := ARG in EXP    ## domain
LIST    := [ ( @SEQ_ LSITEM , ) ]
LSITEM  := KWD | UNPACK | EXP
KWD     := NAME = EXP
UNPACK  := ITEM ..
ARRAY   := ⟨ ( @SEQ LIST:SEQ ; ) ⟩
SEQ     :=  @SEQ EXP ,

ATOM    := STR | ANS | ATTR | OP | VAR | NUM | UNKNOWN
ANS     := /\$(\d+|\$*)/
STR     := /[a-z]?"(?:[^"\\]|\\.)*"/
OP      := ???    ## define it in 'grammar.py'
UNKNOWN := /\?\w*/

NUM     := BIN | HEX | COMPLEX | REAL
COMPLEX := REAL /[+-]/ REAL I
REAL    := /-?\d+(\.\d+)?/ ( /[eE]/ - /-?\d+/ ) ?
BIN     := /0b[01]+/
HEX     := /0x[0-9a-fA-F]+/


## MACROS ##
@GRP $EXP       := "(" - $EXP ")" -
@SEQ $ITM $SEP  := $ITM ( $SEP $ITM ) *
@SEQ_ $ITM $SEP := ( @SEQ $ITM $SEP ) ?