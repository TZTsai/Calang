LINE    := @SEQ ( CMD | DEF | EXP | EMPTY ) ;
EMPTY   := /\s*/

CMD     := CONF | DIR | INFO | DEL | LOAD | IMPORT | EXIT
CONF    := config /\w+/ ( NUM | /on|off/ ) ?
DIR     := dir FIELD ?
DEL     := del @SEQ FIELD ,
LOAD    := load /[\w\.]+/ /-[tvw]/ *
IMPORT  := import /[\w\.]+/ /-[vw]/ *
INFO    := info FIELD ?
EXIT    := exit

DEF     := NM_SP ? BIND
NM_SP   := ( NAME . ) +     ## name space
BIND    := ( FUNC | VAR_ ) AT:PARENT ? = EXP DOC ?  ## Delay this
FUNC    := NAME:VAR FORM
VAR_    := VARS | NAME:VAR
VARS    := [ ( @SEQ VAR_ , ) ]
DOC     := /".*"/

FIELD   := NAME ATTR *
NAME    := /[^\W\d][\w]*'*/
ATTR    := . / NAME:ATTR                            ## '/' forces no space in between

FORM    := PAR_IT
PAR_IT  := PAR_LST | NAME:PAR
PAR_LST := [ ( _PARS ( , _OPTS ) ? ( , _EXT ) ? |  _OPTS ( , _EXT ) ? | _EXT ? ) ]
_PARS   := @SEQ ( BIND ! PAR_IT .. ! ) ,             ## '!' forbids the match
_OPTS   := @SEQ ( BIND:OPTPAR .. ! ) ,
_EXT    := NAME:EXTPAR ..

EXP     := MAP | CLOSURE | ENV | BODY

MAP     := FORM -> EXP                              ## Delay this
CLOSURE := @ ITEM EXP                               ## Delay this
DICT    := @GRP @SEQ BIND ,                         ## Delay this

BODY    := PRINT ? ( IF_ELSE | SEQ ) PRINT ?
IF_ELSE := SEQ if SEQ else EXP                      ## Delay this
SEQ     := _TERM ( BOP ? _TERM ) *
_TERM   := LOP ? ITEM ATTR ? ROP ?

STR     := /".*?"/
PRINT   := /f".*?"/
ITEM    := GROUP | MACRO | ATOM | LIST
GROUP   := @GRP EXP
MACRO   := & / NAME VAL_LST

ATOM    := FIELD | UNKNOWN | ' SYM | ANS | NUM
UNKNOWN := /\?\w*/
SYM     := /[^\W\d]([\w?]+|{\w*?})*/
ANS     := /%(\d+|%*)/

NUM     := BIN | HEX | COMPLEX | REAL
COMPLEX := REAL /[+-]/ REAL I
REAL    := /-?\d+(\.\d+)?/ ( /[eE]/ - /-?\d+/ ) ?
BIN     := /0b[01]+/
HEX     := /0x[0-9a-fA-F]+/

LIST    := ' SYM_LST | GEN_LST | IDC_LST | VAL_LST
SYM_LST := @LST ( UNQUOTE | SYM_LST | SYM ) ,
UNQUOTE := $ ITEM                                   ## convert the item back to a value
GEN_LST := [ ( EXP ( for CONSTR ) + ) ]             ## Delay this
CONSTR  := FORM in EXP WITH ? COND ?
WITH    := with ( DICT | BIND )
COND    := if EXP
VAL_LST := @LST EXP , | @LST SUB_LST:VAL_LST ;
SUB_LST := @SEQ EXP ,

### MACROS ###
@LST $ITM $SEP  := [ ( @SEQ $ITM $SEP ? ) ]
@GRP $EXP       := "(" - $EXP ")" -
@SEQ $ITM $SEP  := $ITM ( $SEP $ITM ) *