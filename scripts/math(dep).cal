poly(coeffs, symb) := sum([coeffs[i] * symb^i | i in enum(coeffs)])
grad(potential, vars) := [diff(potential, var) | var in vars]
normal(mu, sigma) := lambda x: 1/sqrt(2PI*sigma^2) exp(-(x-mu)^2/(2sigma^2))
moddiv(x, y) := [x//y, x%y]
egcd(a, b) := when(a<b, [s,t,d]:egcd(b, a)->[t,s,d]; [q, r]: moddiv(a, b) -> [1, 1-q, b] if r = 0 else [s, t, d]: egcd(b, r) -> {log('q','r','s','t','d')} [t, s-t*q, d])

#TEST
egcd(11111, 12345) #(2471, -2224, 1)
grad(_x^2_y/_t^2,[_x,_y,_t])  #(lambda x, y, t: [2*x*y/t**2, x**2/t**2, -2*x**2*y/t**3])(*(Symbol(var) for var in 'x y t'.split()))