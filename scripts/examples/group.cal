# Groups
Group[m, o] = (
     mul = m, unit = o,
     pow[x, k] = (rec[a, b, i] = a if i==0 else
                  rec[m[a,b], b, i-1] if i%2 else
                  rec[a, m[b,b], i/2]) rec[1, x, k]
)

CyclicGroup[g, m, o] @Group[m, o] = (
     gen = g,
     elements = (rec[x, l] = l if x in l else rec[m[g,x], l+[x]])
                rec[g, []],
     order[x='nan] = len[elements] if x=='nan else
                     first[list[1..order[]], k=>pow[x, k]==unit]
                     if x in elements else 'not_an_element,
     inverse[x] = first[elements, e => mul[e, x] == unit]
)


# Integer Modular Multiplicative Group
Zx[n] = (
     elements = coprimes[n],
     mul[x, y] = x*y%n, pow[x, k] = x^k%n,
     order[x] = first[list[1..n-1], k => pow[x, k]==1],
     type = Group[mul, 1] if not prime?[n] else
            (gen = first[list[2..n-1], x => order[x]==n-1])
            CyclicGroup[gen, mul, 1],
     get[] @type = (elements = elements, N = n, pow = pow)
) get[]

gcd[a, b] = a if b == 0 else gcd[b, a%b]
prime?[n] = ((find_divisor[t] =
              when(t^2>n: n, n%t==0: t, find_divisor[t+1+t%2]))
             n > 1 and find_divisor[2] == n)
first[l, pred=(x=>x)] = (rec[i] = l[i] if pred[l[i]] else rec[i+1]) rec[0]
coprimes[n] = list[1..n-1] if prime?[n] else [x for x in 1..n-1 if gcd[x, n] == 1]


# Finite Field
GF[g, m, n] = (
     reduce[p] = when(p == []: [0],
                      p[0] == 0: reduce[p[1:]],
                      len[p] > n: ((q = poly.pad_zero[g, len[p], 0]) ...
                                   reduce[poly.sub[p, poly.scale[q, p[-1]]]]),
                      [c%m for c in p]),
     mul[p, q] = reduce[poly.mul[p, q]],
     get[] @CyclicGroup[g, mul, [1]] = (mod = m, deg = n)
) get[]
poly = (
     scale[p, a] = p .* a,
     pad_zero[p, n, right=1] = ((k = n-len[l]) ...
          when(k<=0: l, right: l+[0]*k, [0]*k+l)),
     add[p, q] = ((n = max[len[p], len[q]]) ...
          pad_zero[p, n] .+ pad_zero[q, n]),
     sum[ps~] = [0] if ps == [] else add[ps[0], sum[ps[1:]~]],
     raise[p, k] = [0]*k + p,
     mul[p, q] = sum[raise[scale[p, c], i] for [i, c] in enum[q]],
     sub[p, q] = add[p, scale[q, -1]]
)


#TEST
g = Zx[7]
g.N #7
g.gen #3
sort[g.elements] #(1, 2, 3, 4, 5, 6)
g.order[] #6
sort[[x, g.order[x]] for x in g.elements] #((1,1),(2,3),(3,6),(4,3),(5,6),(6,2))
sort[[x, g.inverse[x]] for x in g.elements] #((1,1),(2,4),(3,5),(4,2),(5,3),(6,6))
g.pow[4, 17] #2
g = Zx[24]
g.N #24
g.elements #(1, 5, 7, 11, 13, 17, 19, 23)
g.pow[4, 17]
gf = GF[[1,0,2,1], 3, 3]
[gf.mod, gf.deg] #(3, 3)
gf.mul[[1, 2], [2, 0, 1, 2]]
gf.elements[]
gf = GF[[1, 1, 0, 1, 1, 0, 0, 0, 1], 2, 8]
gf.mul[[1, 1, 0, 0, 1, 0, 0, 1], [1, 0, 1]]  #(1,0,0,1,0,1,1,1)