# utils
gcd[a, b] = a if b == 0 else gcd[b, a%b]
prime?[n] = (find_divisor[t]:
             when(t^2>n: n, n%t==0: t,
                  find_divisor[t+1+t%2])) ...
            n > 1 and find_divisor[2] == n
first[l, pred] = (rec[i]: l[i] if pred[l[i]] else rec[i+1]) rec[0]

Group[m, o] = ...
(mul: m, zero: o,
 pow[x, k]: (rec[a, b, i]: a if i==0 else
                           rec[m[a,b], b, i-1] if i%2 else
                           rec[a, m[b,b], i/2])
            rec[1, x, k])

CyclicGroup[g, m, o] @Group[m, o] = ...
(gen: g,
 elements[]: (rec[x, l]: l if x in l else rec[m[g,x], l+[x]])
             rec[g, []],
 order[x:'nan]: len[elements[]] if x=='nan else
                (rec[x, k]: k if x==zero else rec[mul[x,g], k+1])
                rec[x, 1])

# integer cyclic group
UZ[p] @CyclicGroup[UZ.find_gen[p], UZ.mul[p]] = ...
    (elements: list[1..(p-1)],
     inverse[x]: first[elements, el => mul[x, el]==1])
UZ.order[g, p] = (G: CyclicGroup[g, UZ.mul[p], 1]) G.order[g]
UZ.mul[p] = [x, y] => x*y%p
UZ.find_gen[p] = first[2..p-1, x => UZ.order[x, p]==p-1]

# polynomial field
# F[p, n] @Group

#TEST
g = Group[2, [x,y] => x*y%18]
g.elements[]
prime?[2]  #1
prime?[19] #1
prime?[16] #0
g = Z[24]
g.elements[]
h = Z[17]
h.elements[]
h.pow[4, 87]